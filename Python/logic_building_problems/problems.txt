ðŸ”¹ Level 1 â€“ Easy (Q1â€“10)

1. check_prime(n) â€“ Return True if n is a prime number.
2. fibonacci(n) â€“ Return the first n terms of the Fibonacci series as a list.
3. is_palindrome(s) â€“ Return True if the string s is a palindrome.
4. sum_of_digits(n) â€“ Return the sum of all digits of a number.
5. remove_duplicates(lst) â€“ Return list with duplicates removed.
6. count_vowels(s) â€“ Count and return the number of vowels in the string.
7. max_frequency_char(s) â€“ Return the character with the highest frequency in the string.
8. second_largest(lst) â€“ Return the second largest element from a list.
9. are_anagrams(str1, str2) â€“ Return True if two strings are anagrams.
10. unique_elements_from_two_lists(a, b) â€“ Return unique elements using sets.

ðŸ”¹ Level 2 â€“ Medium (Q11â€“20)
11. reverse_words(sentence) â€“ Reverse the words in a sentence: "hello world" â†’ "world hello"
12. count_characters(s) â€“ Return a dictionary with count of each character.
13. rotate_list(lst, k) â€“ Rotate the list k positions to the right.
14. flatten_list(nested) â€“ Flatten a nested list: [1, [2, 3], 4] â†’ [1, 2, 3, 4]
15. find_pairs_with_sum(lst, target) â€“ Return all pairs whose sum is equal to target.
16. longest_word(sentence) â€“ Return the longest word in a sentence.
17. capitalize_words(s) â€“ Return the string with each word capitalized.
18. is_armstrong(n) â€“ Check whether a number is an Armstrong number.
19. remove_common_chars(a, b) â€“ Return two strings with common characters removed.
20. merge_dicts(d1, d2) â€“ Merge two dictionaries. In case of conflict, keep the higher value.

ðŸ”¹ Level 3 â€“ Slightly Challenging (Q21â€“30)
21.group_by_first_letter(words) â€“ Group words by their first letter using a dictionary.
22. most_frequent_word(sentence) â€“ Return the word with highest frequency.
23. encode_run_length(s) â€“ Run-length encoding: "aaabb" â†’ "a3b2"
24. pattern_checker(s) â€“ Check if string follows a given pattern (like a basic regex).
25. move_zeros_to_end(lst) â€“ Move all zeros to the end of list.
26. string_compression(s) â€“ Compress string like "aabcccccaaa" â†’ "a2b1c5a3"
27. check_balanced_brackets(s) â€“ Return True if brackets are balanced.
28. transpose_matrix(matrix) â€“ Return the transpose of a 2D matrix.
29. diagonal_sum(matrix) â€“ Return sum of main diagonal elements.
30. frequency_sort(s) â€“ Return string sorted by character frequency.